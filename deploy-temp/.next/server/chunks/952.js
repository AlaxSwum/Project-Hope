exports.id=952,exports.ids=[952],exports.modules={9719:(e,r,t)=>{"use strict";t.d(r,{ON:()=>o,OQ:()=>l,W4:()=>c,bR:()=>u,mQ:()=>m,pR:()=>h,wt:()=>d});var a=t(2885);let s="https://tvfgnkrugsvititxqayk.supabase.co",i="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR2Zmdua3J1Z3N2aXRpdHhxYXlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI1MDU0MTEsImV4cCI6MjA2ODA4MTQxMX0.7Yb8uJDFHxETL9vLuG5WCsjAR5-bQNVAZASUM0AayGE";if(!s)throw Error("Missing NEXT_PUBLIC_SUPABASE_URL environment variable");if(!i)throw Error("Missing NEXT_PUBLIC_SUPABASE_ANON_KEY environment variable");let n=null,l=(0,a.createClient)(s,i,{auth:{persistSession:!0,autoRefreshToken:!0}}),o={async createUser(e){try{let r=await fetch("/api/admin/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),t=await r.json();if(!r.ok)return{data:null,error:t.error};return{data:t.data,error:null}}catch(e){return console.error("Create user error:",e),{data:null,error:{message:"Failed to create user"}}}},async signIn(e,r){try{let{data:t,error:a}=await l.auth.signInWithPassword({email:e,password:r});if(a)return console.error("Sign in error:",a),{data:null,error:a};if(t.user)try{let{error:e}=await l.from("users").upsert({id:t.user.id,email:t.user.email,username:t.user.user_metadata?.username||t.user.email,first_name:t.user.user_metadata?.first_name||t.user.email?.split("@")[0]||"User",last_name:t.user.user_metadata?.last_name||"",role:t.user.user_metadata?.role||"staff"},{onConflict:"id"});e&&console.warn("User sync warning:",e)}catch(e){console.warn("User sync failed:",e)}return{data:t,error:null}}catch(e){return console.error("Login error:",e),{data:null,error:{message:"Login failed. Please try again."}}}},async signOut(){let{error:e}=await l.auth.signOut();return{error:e}},async getCurrentUser(){let{data:{user:e}}=await l.auth.getUser();return e},async isAdmin(){try{let e=await this.getCurrentUser();if(!e)return!1;if(e.user_metadata?.role==="administrator")return!0;let{data:r,error:t}=await l.from("users").select("role").eq("id",e.id).single();if(t)return console.warn("Role check error:",t),!1;return r?.role==="administrator"}catch(e){return console.error("Admin check error:",e),!1}},async hasRole(e){try{let r=await this.getCurrentUser();if(!r)return!1;if(r.user_metadata?.role===e)return!0;let{data:t,error:a}=await l.from("users").select("role").eq("id",r.id).single();if(a)return console.warn("Role check error:",a),!1;return t?.role===e}catch(e){return console.error("Role check error:",e),!1}},async getCurrentUserWithProfile(){let e=await this.getCurrentUser();if(!e)return null;try{let{data:r,error:t}=await l.from("users").select("*").eq("id",e.id).single();if(t)return console.warn("Profile fetch error:",t),{user:e,profile:null};return{user:e,profile:r}}catch(r){return console.error("Get user profile error:",r),{user:e,profile:null}}}},c={async getAllUsers(){try{let e=await fetch("/api/admin/users",{method:"GET",headers:{"Content-Type":"application/json"}}),r=await e.json();if(!e.ok)return{data:null,error:r.error};return{data:r.data,error:null}}catch(e){return console.error("Get all users error:",e),{data:null,error:{message:"Failed to fetch users"}}}},async getUserById(e){try{let{data:r,error:t}=await l.from("users").select("*").eq("id",e).single();return{data:r,error:t}}catch(e){return console.error("Get user by ID error:",e),{data:null,error:{message:"Failed to fetch user"}}}},async updateUser(e,r){try{let{data:t,error:a}=await l.from("users").update(r).eq("id",e).select().single();return{data:t,error:a}}catch(e){return console.error("Update user error:",e),{data:null,error:{message:"Failed to update user"}}}},async updateLastLogin(e){try{let{data:r,error:t}=await l.from("users").update({last_login:new Date().toISOString()}).eq("id",e);return{data:r,error:t}}catch(e){return console.error("Update last login error:",e),{data:null,error:{message:"Failed to update last login"}}}},async deleteUser(e){try{let r=await fetch("/api/admin/users",{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({userId:e})}),t=await r.json();if(!r.ok)return{data:null,error:t.error};return{data:t.data,error:null}}catch(e){return console.error("Delete user error:",e),{data:null,error:{message:"Failed to delete user"}}}}},u={async getTimeEntries(e,r,t){let{data:a,error:s}=await l.from("time_entries").select("*").eq("user_id",e).gte("clock_in_time",r).lte("clock_in_time",t);return{data:a,error:s}},async getActiveStaff(e){let{data:r,error:t}=await l.from("time_entries").select("*, user_profiles(*)").eq("branch_id",e).is("clock_out_time",null);return{data:r,error:t}},async getStaffOnBreak(e){let{data:r,error:t}=await l.from("breaks").select("*, time_entries(*, user_profiles(*))").eq("time_entries.branch_id",e).is("end_time",null);return{data:r,error:t}},calculateScheduledHours:async(e,r,t)=>({totalHours:0,entries:[]}),async getAllTimeEntries(e,r){let{data:t,error:a}=await l.from("time_entries").select("*").gte("clock_in_time",e).lte("clock_in_time",r);return{data:t,error:a}},async getEmployeeSchedule(e){let{data:r,error:t}=await l.from("employee_schedules").select("*").eq("user_id",e);return{data:r,error:t}},async getBranchLocation(e){let{data:r,error:t}=await l.from("branch_locations").select("*").eq("branch_id",e).single();return{data:r,error:t}},async updateEmployeeSchedule(e,r){let{data:t,error:a}=await l.from("employee_schedules").update(r).eq("id",e);return{data:t,error:a}},async createEmployeeSchedule(e){let{data:r,error:t}=await l.from("employee_schedules").insert(e);return{data:r,error:t}},async getBranchTimeEntries(e,r){let t=l.from("time_entries").select("*, user_profiles(*)").eq("branch_id",e);r&&(t=t.gte("clock_in_time",r).lt("clock_in_time",r+"T23:59:59"));let{data:a,error:s}=await t;return{data:a,error:s}},async endBreak(e){let{data:r,error:t}=await l.from("breaks").update({end_time:new Date().toISOString()}).eq("id",e);return{data:r,error:t}},async startBreak(e){let{data:r,error:t}=await l.from("breaks").insert(e);return{data:r,error:t}},async getCurrentTimeEntry(e){let{data:r,error:t}=await l.from("time_entries").select("*").eq("user_id",e).is("clock_out_time",null).single();return{data:r,error:t}},async getActiveBreak(e){let{data:r,error:t}=await l.from("breaks").select("*").eq("time_entry_id",e).is("end_time",null).single();return{data:r,error:t}},async clockIn(e){let{data:r,error:t}=await l.from("time_entries").insert(e);return{data:r,error:t}},async clockOut(e,r){let{data:t,error:a}=await l.from("time_entries").update({clock_out_time:new Date().toISOString(),...r}).eq("id",e);return{data:t,error:a}},async updateBranchLocation(e,r){let{data:t,error:a}=await l.from("branch_locations").update(r).eq("id",e);return{data:t,error:a}},async createBranchLocation(e){let{data:r,error:t}=await l.from("branch_locations").insert(e);return{data:r,error:t}}},d={async getChecklistsForUser(e){let{data:r,error:t}=await l.from("checklists").select("*").eq("assigned_to",e);return{data:r,error:t}},async getUserProgress(e){let{data:r,error:t}=await l.from("user_checklist_progress").select("*").eq("user_id",e);return{data:r,error:t}},async getDailyStatus(e){let r=new Date().toISOString().split("T")[0],{data:t,error:a}=await l.from("user_checklist_progress").select("*").eq("user_id",e).gte("completed_at",r).lt("completed_at",r+"T23:59:59");return{data:t,error:a}},async getChecklistItems(e){let{data:r,error:t}=await l.from("checklist_items").select("*").eq("checklist_id",e).order("order_index");return{data:r,error:t}},async updateItemProgress(e){let{error:r}=await l.from("user_checklist_progress").upsert(e);return{error:r}},async getFolders(e){let r=l.from("checklist_folders").select("*");e&&(r=r.eq("branch_id",e));let{data:t,error:a}=await r;return{data:t,error:a}},async getChecklists(e){let r=l.from("checklists").select("*");e&&(r=r.eq("folder_id",e));let{data:t,error:a}=await r;return{data:t,error:a}},async deleteFolder(e){let{error:r}=await l.from("checklist_folders").delete().eq("id",e);return{error:r}},async deleteChecklist(e){let{error:r}=await l.from("checklists").delete().eq("id",e);return{error:r}},async getAllUsersProgress(e){let{data:r,error:t}=await l.from("user_progress").select("*, user_profiles(*), checklist_items(*)").gte("completed_at",e).lt("completed_at",e+"T23:59:59");return{data:r,error:t}},async createFolder(e){let{error:r}=await l.from("checklist_folders").insert(e);return{error:r}},async createChecklist(e){let{error:r}=await l.from("checklists").insert(e);return{error:r}},async createChecklistItem(e){let{error:r}=await l.from("checklist_items").insert(e);return{error:r}},async deleteChecklistItem(e){let{error:r}=await l.from("checklist_items").delete().eq("id",e);return{error:r}},async reorderChecklistItems(e,r){let t=r.map((e,r)=>l.from("checklist_items").update({order_index:r}).eq("id",e.id));return await Promise.all(t),{error:null}},async updateFolder(e,r){let{error:t}=await l.from("checklist_folders").update(r).eq("id",e);return{error:t}},async updateChecklist(e,r){let{error:t}=await l.from("checklists").update(r).eq("id",e);return{error:t}}},m={async getHolidays(e){let r=l.from("holidays").select("*");e&&(r=r.eq("branch_id",e));let{data:t,error:a}=await r;return{data:t,error:a}},async createHoliday(e){let{data:r,error:t}=await l.from("holidays").insert(e);return{data:r,error:t}},async updateHoliday(e,r){let{error:t}=await l.from("holidays").update(r).eq("id",e);return{error:t}},async deleteHoliday(e){let{error:r}=await l.from("holidays").delete().eq("id",e);return{error:r}}},h=l},3893:(e,r,t)=>{"use strict";t.a(e,async(e,a)=>{try{t.r(r),t.d(r,{default:()=>l});var s=t(997),i=t(3590);t(8819),t(108);var n=e([i]);i=(n.then?(await n)():n)[0];let l=function({Component:e,pageProps:r}){return(0,s.jsxs)(s.Fragment,{children:[s.jsx(e,{...r}),s.jsx(i.ToastContainer,{position:"top-right",autoClose:3e3,hideProgressBar:!1,newestOnTop:!0,closeOnClick:!0,rtl:!1,pauseOnFocusLoss:!0,draggable:!0,pauseOnHover:!0,theme:"light"})]})};a()}catch(e){a(e)}})},108:()=>{}};